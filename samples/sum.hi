fun f x, y, ...z
    # zの各要素を足したい
    $sum = x + y
    loop e, z
        $sum = $sum + e
    end
    ret $sum

    # 案1. 変数を導入する
    # 
    # - 変数宣言文`mutable`を追加
    # - "+=", "++"等の演算を定義し、変数に対してのみ許可
    # - "="(再代入)を許可するかは要検討
    # 
    # mutable s = 0
    # loop e, z
    #     s += e
    # end
    # 
    # - 識別子に対して`$id`をつけた方がコード上区別できて良さそう
    # - トークン上idと$idを区別するかどうかは要検討
    # 
    # $s = 0
    # loop e, z
    #     $s += e
    # end
    # 
    # メリット
    # - 既存の言語と同じように使える
    # デメリット
    # - 
    # 
    # 案2. reduceを用意する
    # 
    # - 組込関数reduceを定義する
    # - 演算子を関数として引数に渡せるようにする
    # 
    # ret = reduce [1, 2, 3], (+), 0
    # 
    # メリット
    # - 変数を導入しなくて良い
    # デメリット
    # - mutableがあれば組込関数にせずともユーザー定義可能
end

# 変数があればreduceを定義できる
# (現状、値として関数を扱えないのでそこは対応する必要がある)
#fun reduce ary acc ini
#    $r = ini or ary.shift!
#    loop e, ary
#        $r = acc r, e
#    end
#    ret $r
#end

p f 10, 20, 30, 40

