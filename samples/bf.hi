fun len seq
    $c = 0
    loop seq
        $c++
    end
    ret $c
end

fun find_brace_end seq, br_begin, br_end
    $lev = 0
    $i = 0
    loop c, seq
        sw c
        case br_begin: $lev++
        case br_end:   $lev--
        end
        if $lev == 0
            ret $i
        end
        $i++
    end
    ret -1
end

fun parse prog
    $buf = [0,0,0,0,0,0,0,0,0,0]
    $ptr = 0
    $i = 0
    loop c, prog
        #p "  c=\{c}", "$i=", $i
        sw c
        case ">": $ptr++
        case "<": $ptr--
        case "+": $buf[$ptr] = $buf[$ptr] + 1
        case "-": $buf[$ptr] = $buf[$ptr] - 1
        case ",": $buf[$ptr] = input
        case ".": print $buf[$ptr]
        case "["
            if $buf[$ptr] == 0
                next = find_brace_end (prog)[$i:], "[", "]"
                if next != -1
                    $i := $i + next + 1
                    cont $i
                end
            end
        case "]"
            if $buf[$ptr] != 0
                next = find_brace_end (prog)[$i:0], "]", "["
                #p "    a=", (prog)[$i:0], "next=\{next}"
                if next != -1
                    $i := $i - next + 1
                    #p "    $i=", $i
                    cont $i
                end
            end
        end
        $i++
    end
    p
end

#parse "."
#parse ",."

#parse "++++++++++ ++++++++++ ++++++++++ +++."
#parse "++++++++++ ++++++++++ ++++++++++ +++ ---."

#parse "[]"
#parse "+++[.-]..."
parse "+++[[.-]]..."

#{
if (len sys_args) >= 1
    parse (sys_args)[0]
end
#}

